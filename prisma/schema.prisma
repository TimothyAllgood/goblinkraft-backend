// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  firstName   String?
  lastName    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  userImageId Int? @unique
  userImage Image?  @relation(fields: [userImageId], references: [id], onDelete: Cascade)
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  username     String     @unique
  password     String?
  subscription String?
  subscribed   Boolean    @default(false)
  verified     Boolean    @default(false)
  role         Role       @default(USER)
  profile      Profile?
  type         String     @default("password")
  campaigns    Campaign[]
}

model Campaign {
  id      Int      @id @default(autoincrement())
  name    String?
  dm      User     @relation(fields: [userId], references: [id])
  userId  Int
  players Player[]
  backgroundImageId Int? @unique
  backgroundImage Image?  @relation(fields: [backgroundImageId], references: [id], onDelete: Cascade)
}

model Quirk {
  id      Int      @id @default(autoincrement())
  name    String    @unique
  info    String @unique
}

model Activity {
  id      Int      @id @default(autoincrement())
  name    String @unique
  info    String @unique
}

model Job {
  id      Int      @id @default(autoincrement())
  name    String
}

model Player {
  id        Int        @id @default(autoincrement())
  name      String?
  class     String?
  level     String?
  campaigns Campaign[]
}

model RollTable {
  id         Int             @id @default(autoincrement())
  name       String
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId Int
  items      RollTableItem[]
}

model RollTableItem {
  id          Int       @id @default(autoincrement())
  name        String
  rollTable   RollTable @relation(fields: [rollTableId], references: [id])
  rollTableId Int       @unique
}

model Category {
  id        Int         @id @default(autoincrement())
  name      String @unique
  RollTable RollTable[]
}

model Image {
   id        Int        @id @default(autoincrement())
   url String
   assetId String
   publicId String?
   campaign Campaign?
   profile Profile?
}

model ItemEffect {
  id        Int        @id @default(autoincrement())
  name      String @unique
  description String @unique
  itemType    String
  affixType   String
  rarity      Rarity @default(COMMON)
}

model ItemCurse {
  id        Int        @id @default(autoincrement())
  name      String @unique
  description String @unique
  severity      Severity @default(MINOR)
}

model PlotHook {
  id        Int        @id @default(autoincrement())
  name      String @unique
  description String @unique
  type      String @default("npc")
}

model TavernRumor {
  id        Int        @id @default(autoincrement())
  name      String @unique
}

model TavernAtmosphere {
  id        Int        @id @default(autoincrement())
  name      String @unique
  info      String @unique
  quality   String @default("squalid")
}

model TavernFeature {
  id        Int        @id @default(autoincrement())
  name      String @unique
  info      String @unique
  quality   String @default("squalid")
  type      String?
}

model TavernEvent {
  id        Int        @id @default(autoincrement())
  name      String @unique
  info      String @unique
  quality   String @default("squalid")
  type      String?
}

model MenuItem {
  id        Int        @id @default(autoincrement())
  name      String @unique
  description String @unique
  price String
  type      String @default("food")
  quality   String @default("common")
}

model MonsterAbility {
  id        Int        @id @default(autoincrement())
  affix      String @unique
  description String @unique
  weight String @default("common")
  cr  Decimal @db.Decimal(2,1)
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  VERYRARE
  LEGENDARY
}

enum Severity {
  MINOR
  MAJOR
}
